#include <iostream>
#include <winsock2.h>
#include <ws2tcpip.h> // Для inet_pton
#include <string>

#pragma comment(lib, "Ws2_32.lib")

using namespace std;

const u_short MY_PORT = 666;  // Порт для подключения к серверу

int main() {
    // Шаг 1 - Инициализация Winsock
    setlocale(LC_ALL, "Russian");
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        cout << "Error WSAStartup: " << WSAGetLastError() << endl;
        return -1;
    }

    // Шаг 2 - Создание сокета
    SOCKET client_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (client_socket == INVALID_SOCKET) {
        cout << "Error socket: " << WSAGetLastError() << endl;
        WSACleanup();
        return -1;
    }

    // Шаг 3 - Указание адреса сервера
    sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(MY_PORT);

    // Используем inet_pton для преобразования IP-адреса
    if (inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr) <= 0) {
        cout << "Invalid address/ Address not supported" << endl;
        closesocket(client_socket);
        WSACleanup();
        return -1;
    }

    // Шаг 4 - Подключение к серверу
    if (connect(client_socket, (sockaddr*)&server_addr, sizeof(server_addr)) == SOCKET_ERROR) {
        cout << "Error connect: " << WSAGetLastError() << endl;
        closesocket(client_socket);
        WSACleanup();
        return -1;
    }

    cout << "Подкючен к серверу (Введите 'bye' для выхода).\n";

    // Шаг 5 - Общение с сервером
    string message;
    char buffer[1024];
    while (true) {
        cout << "Введите сообщение: ";
        getline(cin, message);

        // Отправка сообщения на сервер
        send(client_socket, message.c_str(), message.size(), 0);

        // Проверка на команду "quit"
        if (message == "bye") {
            break;
        }

        // Получение эхо-сообщения от сервера
        int bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);
        if (bytes_received > 0) {
            buffer[bytes_received] = '\0'; // Завершаем строку
            cout << "Echo from server: " << buffer << endl;
        }
        else {
            cout << "Error receiving data: " << WSAGetLastError() << endl;
            break;
        }
    }

    // Шаг 6 - Очистка
    closesocket(client_socket);
    WSACleanup();
    return 0;
}