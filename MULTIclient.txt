#include <iostream>
#include <winsock2.h>
#include <thread>
#include <mutex>
#include <vector>

#pragma comment(lib, "Ws2_32.lib")

using namespace std;

const u_short MY_PORT = 666;  // Порт, который слушает сервер
int nclients = 0;              // Количество активных клиентов
mutex client_mutex;            // Мьютекс для защиты доступа к nclients

// Прототип функции, обслуживающей подключившихся клиентов
DWORD WINAPI ConToClient(LPVOID client_socket);

int main() {
    cout << "TCP MULTITHREADED SERVER DEMO\n";
    setlocale(LC_ALL, "Russian");

    // Шаг 1 - Инициализация библиотеки сокетов
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        cout << "Error WSAStartup: " << WSAGetLastError() << endl;
        return -1;
    }

    // Шаг 2 - создание сокета
    SOCKET mysocket = socket(AF_INET, SOCK_STREAM, 0);
    if (mysocket == INVALID_SOCKET) {
        cout << "Error socket: " << WSAGetLastError() << endl;
        WSACleanup();
        return -1;
    }

    // Шаг 3 - связывание сокета с локальным адресом
    sockaddr_in local_addr;
    local_addr.sin_family = AF_INET;
    local_addr.sin_port = htons(MY_PORT);
    local_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(mysocket, (sockaddr*)&local_addr, sizeof(local_addr)) == SOCKET_ERROR) {
        cout << "Error bind: " << WSAGetLastError() << endl;
        closesocket(mysocket);
        WSACleanup();
        return -1;
    }

    // Шаг 4 - ожидание подключений
    if (listen(mysocket, SOMAXCONN) == SOCKET_ERROR) {
        cout << "Error listen: " << WSAGetLastError() << endl;
        closesocket(mysocket);
        WSACleanup();
        return -1;
    }

    cout << "Ожидание подключения...\n";

    // Шаг 5 - цикл извлечения запросов на подключение из очереди
    while (true) {
        sockaddr_in client_addr;
        int client_addr_size = sizeof(client_addr);
        SOCKET client_socket = accept(mysocket, (sockaddr*)&client_addr, &client_addr_size);
        if (client_socket == INVALID_SOCKET) {
            cout << "Error accept: " << WSAGetLastError() << endl;
            continue; // Продолжаем ожидать подключения
        }

        {
            lock_guard<mutex> lock(client_mutex);
            nclients++; // Увеличиваем счетчик клиентов
            cout << "+новый пользователь! Всего пользователей: " << nclients << endl;
        }

        // Вызов нового потока для клиента
        CreateThread(NULL, 0, ConToClient, (LPVOID)client_socket, 0, NULL);
    }

    // Закрытие сокета и завершение работы
    closesocket(mysocket);
    WSACleanup();
    return 0;
}

/* Эта функция создается в отдельном потоке и обслуживает очередного подключившегося клиента независимо от остальных */
DWORD WINAPI ConToClient(LPVOID client_socket) {
    SOCKET my_sock = (SOCKET)client_socket;
    char buff[1024];
    int len;

    // Цикл эхо: прием строки и возвращение ее клиенту
    while ((len = recv(my_sock, buff, sizeof(buff) - 1, 0)) > 0) {
        buff[len] = '\0'; // Завершаем строку
        cout << "Получено: " << buff << endl;
        send(my_sock, buff, len, 0); // Отправляем обратно клиенту
    }

    // Произошел выход из цикла, соединение с клиентом разорвано
    {
        lock_guard<mutex> lock(client_mutex);
        nclients--; // Уменьшаем счетчик активных клиентов
        cout << "-Отключение! Всего пользователей: " << nclients << endl;
    }

    closesocket(my_sock);
    return 0;
}